from Participant import Participant
from Log import Log

# General Queue in the event
# Base Queue Class which contains all the basic function
# This is the default type of Queue if admin doesn't specify which type to use


class CRUDQueue:
    # initializing the Queue
    # arguments: name of the queue (e.g. "lab1")
    #           id of the queue (generated by Event class)
    def __init__(self, name, queue_id):
        self.name = name
        self.queue_id = queue_id
        self.queue = []
        self.VIPqueue = []
        self.isLock = False
        self.Log = Log('queue')

    # get the name of the queue
    def getQueueName(self):
        self.Log.logContent(str(self.queue_id) +
                            ": Queue.getQueueName() complete")
        return self.name

    # get the id of the queue
    def getQueueId(self):
        self.Log.logContent(str(self.queue_id)+": Queue.getQueueId() complete")
        return str(self.queue_id)

    # add a user into the queue
    # argument: user which need to be added
    def addUser(self, user):
        self.Log.logContent(str(self.queue_id) +
                            ": Queue.addUser({0})".format(user))
        if(not self.isLock):
            self.queue.append(user)
            self.Log.logContent(str(self.queue_id) +
                                ": Queue.addUser({0}) complete".format(user))
            return True
        else:
            self.Log.logContent(str(self.queue_id) +
                                ": Queue.addUser({0}) error".format(user))
            return False

    # remove a user in the queue
    # argument: user which need to be removed
    def removeUser(self, user):
        self.Log.logContent(str(self.queue_id) +
                            ": Queue.removeUser({0})".format(user.user_id))
        if(not self.isLock):
            self.queue.remove(user)
            self.Log.logContent(
                str(self.queue_id)+": Queue.removeUser({0}) complete".format(user.user_id))
            return True
        else:
            self.Log.logContent(
                str(self.queue_id)+": Queue.removeUser({0}) error".format(user.user_id))
            return False

    # remove a user in the queue by using user ID
    # argument: id of that user
    def removeUserById(self, id):
        self.Log.logContent(str(self.queue_id) +
                            ": Queue.removeUserById({0})".format(id))
        if(not self.isLock):
            for i in self.queue:
                if id == i.user_id:
                    self.Log.logContent(
                        str(self.queue_id)+": Queue.removeUser({0}) complete".format(id))
                    return True
            self.Log.logContent(
                str(self.queue_id)+": Queue.removeUser({0}) error ID not found".format(id))
            return False
        else:
            self.Log.logContent(str(self.queue_id) +
                                ": Queue.removeUser({0}) error".format(user))
            return False

    # pop the first user in the queue
    def popFirstUser(self):
        self.Log.logContent(str(self.queue_id)+": Queue.popFirstUser()")
        if (not self.isLock):
            self.Log.logContent(str(self.queue_id) +
                                ": Queue.popFirstUser() complete")
            return self.queue.pop()
        else:
            self.Log.logContent(str(self.queue_id) +
                                ": Queue.popFirstUser() error")
            return None

    # Lock the queue
    # Queue can't use any function other than unLock, getQueueName, getQueueId
    def Lock(self):
        self.Log.logContent(str(self.queue_id)+": Queue.Lock() complete")
        if (not self.isLock):
            self.isLock = True
            return True
        return True

    # Lock the queue
    # remove all the restriciton which Lock() brings
    def Unlock(self):
        self.Log.logContent(str(self.queue_id)+": Queue.Unlock() complete")
        if (self.isLock):
            self.isLock = False
            return True
        return True
